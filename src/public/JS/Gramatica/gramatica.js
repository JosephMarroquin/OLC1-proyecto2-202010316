/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,25],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,30],$V6=[1,31],$V7=[1,32],$V8=[1,37],$V9=[1,33],$Va=[1,34],$Vb=[1,38],$Vc=[1,39],$Vd=[1,35],$Ve=[1,36],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[5,28,32,33,34,35,41,44,45,49,54,56,57,58,59,60,61,62,63,74,75,76],$Vj=[1,54],$Vk=[1,60],$Vl=[30,40],$Vm=[2,57],$Vn=[2,51],$Vo=[1,78],$Vp=[8,30,36,40],$Vq=[2,52],$Vr=[1,80],$Vs=[2,53],$Vt=[1,82],$Vu=[2,54],$Vv=[1,84],$Vw=[2,55],$Vx=[1,86],$Vy=[1,100],$Vz=[1,93],$VA=[1,92],$VB=[1,105],$VC=[1,91],$VD=[1,96],$VE=[1,97],$VF=[1,98],$VG=[1,99],$VH=[1,94],$VI=[1,95],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,104],$VN=[5,28,32,33,34,35,41,44,45,48,49,54,56,57,58,59,60,61,62,63,74,75,76],$VO=[1,136],$VP=[1,137],$VQ=[1,143],$VR=[1,142],$VS=[1,145],$VT=[1,147],$VU=[1,144],$VV=[1,146],$VW=[1,138],$VX=[1,139],$VY=[1,140],$VZ=[1,141],$V_=[1,148],$V$=[1,149],$V01=[8,37,40,42,43,51,55,65,66,67,68,69,70,71,77,78,79,80,81,82],$V11=[1,155],$V21=[1,156],$V31=[1,157],$V41=[1,158],$V51=[1,159],$V61=[1,160],$V71=[8,37,40,42,43,51,55,65,66,67,68,69,70,71,81,82],$V81=[8,37,40,42,43,51,55,65,66,67,68,69,70,71,77,78,80,81,82],$V91=[8,37,40,51,55,65,67,81,82],$Va1=[1,271],$Vb1=[8,37,40,51,55,66],$Vc1=[1,299],$Vd1=[45,54,57],$Ve1=[1,313],$Vf1=[37,40],$Vg1=[8,37,40,51,55,65,66,67,81,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DECLARACION":7,"Tok_pyc":8,"ASIGNACION":9,"DECLARACIONyASIGNACION":10,"DECLARACION_VECTORES":11,"DECLARACION_VECTORES_TIPO2":12,"INCREMENTO_DECREMENTO":13,"MODIFICA_VECTOR":14,"BLOQUE":15,"IF":16,"WHILE":17,"DO_WHILE":18,"PRINT":19,"PRINTLN":20,"SWITCH":21,"FOR":22,"METODOS":23,"LLAMADAS":24,"BREAK":25,"CONTINUE":26,"RETURN":27,"Tok_TD_int":28,"ID_LIST":29,"Tok_asigna1":30,"EXP":31,"Tok_TD_double":32,"Tok_TD_boolean":33,"Tok_TD_string":34,"Tok_TD_char":35,"Tok_cor1":36,"Tok_cor2":37,"Tok_new":38,"VECTOR_LIST":39,"Tok_coma":40,"Tok_ID":41,"Tok_mas":42,"Tok_menos":43,"Tok_llav1":44,"Tok_llav2":45,"elif_list":46,"elif":47,"Tok_else":48,"Tok_if":49,"Tok_par1":50,"Tok_par2":51,"CASE_LIST":52,"CASE":53,"Tok_case":54,"Tok_dospuntos":55,"Tok_switch":56,"Tok_default":57,"Tok_while":58,"Tok_do":59,"Tok_for":60,"Tok_run":61,"Tok_print":62,"Tok_println":63,"OPTERNARIO":64,"Tok_igual":65,"Tok_interrogacion":66,"Tok_diferente":67,"Tok_menor":68,"Tok_menori":69,"Tok_mayor":70,"Tok_mayori":71,"CASTEOS":72,"Tok_tostring":73,"Tok_break":74,"Tok_continue":75,"Tok_return":76,"Tok_por":77,"Tok_div":78,"Tok_pot":79,"Tok_mod":80,"Tok_and":81,"Tok_or":82,"Tok_not":83,"ENTERO":84,"Tok_numero":85,"Tok_true":86,"Tok_false":87,"Tok_string":88,"Tok_char":89,"Tok_toLower":90,"Tok_toupper":91,"Tok_round":92,"Tok_typeof":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"Tok_pyc",28:"Tok_TD_int",30:"Tok_asigna1",32:"Tok_TD_double",33:"Tok_TD_boolean",34:"Tok_TD_string",35:"Tok_TD_char",36:"Tok_cor1",37:"Tok_cor2",38:"Tok_new",40:"Tok_coma",41:"Tok_ID",42:"Tok_mas",43:"Tok_menos",44:"Tok_llav1",45:"Tok_llav2",48:"Tok_else",49:"Tok_if",50:"Tok_par1",51:"Tok_par2",54:"Tok_case",55:"Tok_dospuntos",56:"Tok_switch",57:"Tok_default",58:"Tok_while",59:"Tok_do",60:"Tok_for",61:"Tok_run",62:"Tok_print",63:"Tok_println",65:"Tok_igual",66:"Tok_interrogacion",67:"Tok_diferente",68:"Tok_menor",69:"Tok_menori",70:"Tok_mayor",71:"Tok_mayori",73:"Tok_tostring",74:"Tok_break",75:"Tok_continue",76:"Tok_return",77:"Tok_por",78:"Tok_div",79:"Tok_pot",80:"Tok_mod",81:"Tok_and",82:"Tok_or",83:"Tok_not",84:"ENTERO",85:"Tok_numero",86:"Tok_true",87:"Tok_false",88:"Tok_string",89:"Tok_char",90:"Tok_toLower",91:"Tok_toupper",92:"Tok_round",93:"Tok_typeof"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,4],[10,4],[10,4],[10,4],[10,4],[11,10],[11,10],[11,10],[11,10],[11,10],[11,15],[11,15],[11,15],[11,15],[11,15],[12,8],[12,8],[12,8],[12,8],[12,8],[12,16],[12,16],[12,16],[12,16],[12,16],[39,3],[39,1],[7,2],[7,2],[7,2],[7,2],[7,2],[29,3],[29,1],[9,3],[13,3],[13,3],[15,3],[15,2],[46,2],[46,1],[47,6],[16,5],[16,7],[16,6],[16,8],[52,2],[52,1],[53,4],[21,7],[21,10],[21,9],[17,5],[18,6],[22,9],[22,11],[22,11],[22,9],[22,11],[22,11],[23,4],[23,5],[24,4],[24,5],[19,5],[20,5],[14,6],[14,9],[64,7],[64,7],[64,7],[64,7],[64,7],[64,7],[72,4],[72,4],[72,4],[72,4],[25,2],[26,2],[27,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,3],[31,3],[31,2],[31,3],[31,2],[31,2],[31,2],[31,2],[31,2],[31,2],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4],[31,4],[31,4],[31,4],[31,4],[31,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new AST_Node("RAIZ","RAIZ",this.$first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-1]);return this.$
break;
case 2:
$$[$0-1].addChilds($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$= new AST_Node("SENTENCIAS","SENTENCIAS",this._$.first_line,_$[$0].last_column);
                      this.$.addChilds($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 14: case 124:
this.$=$$[$0-1]
break;
case 11: case 12: case 13: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 119: case 120:
this.$=$$[$0]
break;
case 24: case 25: case 26: case 27: case 28:
this.$=new AST_Node("DECLARACIONyASIGNACION","DECLARACIONyASIGNACION",this._$.first_line,_$[$0-3].last_column);
                                                                   this.$.addChilds($$[$0-2],$$[$0],$$[$0-3]);
break;
case 29: case 30: case 31: case 32: case 33:
this.$=new AST_Node("DECLARACION_VECTORES","DECLARACION_VECTORES",this._$.first_line,_$[$0-9].last_column);
                                                                   this.$.addChilds($$[$0-9],$$[$0-8],$$[$0-1]);
break;
case 34: case 35: case 36: case 37: case 38:
this.$=new AST_Node("DECLARACION_VECTORES2","DECLARACION_VECTORES2",this._$.first_line,_$[$0-14].last_column);
                                                                   this.$.addChilds($$[$0-14],$$[$0-13],$$[$0-4],$$[$0-1]);
break;
case 39: case 40: case 41: case 42: case 43:
this.$=new AST_Node("DECLARACION_VECTORES_TIPO2","DECLARACION_VECTORES_TIPO2",this._$.first_line,_$[$0-7].last_column);
                                                                   this.$.addChilds($$[$0-7],$$[$0-6],$$[$0-1]);
break;
case 44: case 45: case 46: case 47: case 48:
this.$=new AST_Node("DECLARACION_VECTORES_TIPO22","DECLARACION_VECTORES_TIPO22",this._$.first_line,_$[$0-15].last_column);
                                                                   this.$.addChilds($$[$0-15],$$[$0-14],$$[$0-6],$$[$0-2]);
break;
case 49:
$$[$0-2].addChilds($$[$0]); this.$=$$[$0-2];
break;
case 50:
this.$= new AST_Node("VECTOR_LIST","VECTOR_LIST"); this.$.addChilds($$[$0])
break;
case 51: case 52: case 53: case 54: case 55:
this.$= new AST_Node("DECLARACION","DECLARACION",this._$.first_line,_$[$0-1].first_column); this.$.addChilds($$[$0],$$[$0-1])
break;
case 56:
$$[$0-2].addChilds(new AST_Node("ID",$$[$0],this._$.first_line,_$[$0].first_column)); this.$=$$[$0-2];
break;
case 57:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addChilds(new AST_Node("ID",$$[$0],this._$.first_line,_$[$0].first_column))
break;
case 58:
this.$=new AST_Node("ASIGNACION","ASIGNACION",this._$.first_line,_$[$0-2].last_column); 
                                            this.$.addChilds($$[$0-2],$$[$0]);
break;
case 59:
this.$=new AST_Node("ASIGNACION_INCREMENTO","ASIGNACION_INCREMENTO",this._$.first_line,_$[$0-2].last_column); 
                                            this.$.addChilds(new AST_Node("ID",$$[$0-2],this._$.first_line,_$[$0-2].first_column));
break;
case 60:
this.$=new AST_Node("ASIGNACION_DECREMENTO","ASIGNACION_DECREMENTO",this._$.first_line,_$[$0-2].last_column); 
                                            this.$.addChilds(new AST_Node("ID",$$[$0-2],this._$.first_line,_$[$0-2].first_column));
break;
case 61:
this.$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,_$[$0-2].last_column); this.$.addChilds($$[$0-1])
break;
case 62:
this.$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,_$[$0-1].last_column);
break;
case 63: case 70:
$$[$0-1].addChilds($$[$0]);this.$=$$[$0-1]
break;
case 64:
this.$=new AST_Node("elif_list","elif_list",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0]);
break;
case 65:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-2],$$[$0])
break;
case 66:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-2],$$[$0])
break;
case 67:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-6].last_column);this.$.addChilds($$[$0-4],$$[$0-2],$$[$0])
break;
case 68:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-3],$$[$0-1],$$[$0],"elif")
break;
case 69:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-7].last_column);this.$.addChilds($$[$0-5],$$[$0-3],$$[$0-2],$$[$0])
break;
case 71:
this.$=new AST_Node("CASE_LIST","CASE_LIST",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0]);
break;
case 72:
this.$= new AST_Node("CASE","CASE",this._$.first_line,_$[$0-3].last_column);this.$.addChilds($$[$0-2],$$[$0])
break;
case 73:
this.$= new AST_Node("SWITCH","SWITCH",this._$.first_line,_$[$0-6].last_column);this.$.addChilds($$[$0-4],$$[$0-1])
break;
case 74:
this.$= new AST_Node("SWITCH","SWITCH",this._$.first_line,_$[$0-9].last_column);this.$.addChilds($$[$0-7],$$[$0-4],$$[$0-1])
break;
case 75:
this.$= new AST_Node("DEFAULT","DEFAULT",this._$.first_line,_$[$0-8].last_column);this.$.addChilds($$[$0-6],$$[$0-1])
break;
case 76:
this.$=new AST_Node("WHILE","WHILE",this._$.first_line,_$[$0-4].last_column); this.$.addChilds($$[$0-2],$$[$0])
break;
case 77:
this.$=new AST_Node("DO_WHILE","DO_WHILE",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-4],$$[$0-1])
break;
case 78:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-8].last_column); this.$.addChilds($$[$0-6],$$[$0-4],$$[$0-2],$$[$0])
break;
case 79:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-10].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-4],$$[$0],"incremento")
break;
case 80:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-10].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-4],$$[$0],"decremento")
break;
case 81:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-8].last_column); this.$.addChilds($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],"asigna")
break;
case 82:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-10].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-4],$$[$0],"asigna_incre")
break;
case 83:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-10].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-4],$$[$0],"asigna_decre")
break;
case 84:
this.$=new AST_Node("METODO_SIN_PA","METODO_SIN_PA",this._$.first_line,_$[$0-3].last_column);this.$.addChilds($$[$0-3],$$[$0]);
break;
case 85:
this.$=new AST_Node("METODO_SIN_RUN","METODO_SIN_RUN",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-3],$$[$0]);
break;
case 86:
this.$=new AST_Node("LLAMADA_MSIN_PA","LLAMADA_MSIN_PA",this._$.first_line,_$[$0-3].last_column);this.$.addChilds($$[$0-3]);
break;
case 87:
this.$=new AST_Node("LLAMADA_MSIN_RUN","LLAMADA_MSIN_RUN",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-3]);
break;
case 88:
this.$= new AST_Node("PRINT","PRINT",this._$.first_line,_$[$0-4].last_column); this.$.addChilds($$[$0-2]);
break;
case 89:
this.$= new AST_Node("PRINTLN","PRINTLN",this._$.first_line,_$[$0-4].last_column); this.$.addChilds($$[$0-2]);
break;
case 90:
this.$=new AST_Node("MODIFICA_VECTOR","MODIFICA_VECTOR",this._$.first_line,_$[$0-5].last_column); this.$.addChilds($$[$0-5],$$[$0-3],$$[$0]);
break;
case 91:
this.$=new AST_Node("MODIFICA_VECTOR2","MODIFICA_VECTOR2",this._$.first_line,_$[$0-8].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-3],$$[$0]);
break;
case 92: case 93: case 94: case 95: case 96: case 97:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-6],new AST_Node("op",$$[$0-5],this._$.first_line,_$[$0-5].last_column),$$[$0-4],$$[$0-2],$$[$0]);
break;
case 98:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("casteo_entero",$$[$0],this._$.first_line,_$[$0-3].last_column));
break;
case 99:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("casteo_double",$$[$0],this._$.first_line,_$[$0-3].last_column));
break;
case 100:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("casteo_char",$$[$0],this._$.first_line,_$[$0-3].last_column));
break;
case 101:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("casteo_string",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 102:
this.$= new AST_Node("BREAK","BREAK",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1]);
break;
case 103:
this.$= new AST_Node("CONTINUE","CONTINUE",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1]);
break;
case 104:
this.$= new AST_Node("RETURN","RETURN",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1]);
break;
case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-2],new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 121:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-2].last_column);this.$.addChilds(new AST_Node("incremento",$$[$0-2],this._$.first_line,_$[$0-2].last_column));
break;
case 122:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-2].last_column);this.$.addChilds(new AST_Node("decremento",$$[$0-2],this._$.first_line,_$[$0-2].last_column));
break;
case 123:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 125:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds(new AST_Node("entero",$$[$0]*-1,this._$.first_line,_$[$0-1].last_column));
break;
case 126:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds(new AST_Node("decimal",$$[$0]*-1,this._$.first_line,_$[$0-1].last_column));
break;
case 127: case 128: case 129: case 130:
L_Error.getInstance().insertar(new N_Error("Semantico","No esta permitida la negacion unario en esta expresion" ,this._$.first_line,_$[$0-1].last_column));
break;
case 131:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);
                                         var text = $$[$0].substr(0,$$[$0].length);
                                         text=text.replace(/\\n/g,"\n");
                                         text=text.replace(/\\t/g,"\t");
                                         text=text.replace(/\\r/g,"\r");
                                         text=text.replace(/\\\\/g,"\\");
                                         text=text.replace(/\\\"/g,"\"");
                                         text=text.replace(/\\\'/g,"\'");
                                        this.$.addChilds(new AST_Node("string",text,this._$.first_line,_$[$0].last_column));
break;
case 132:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);
                                         var text2 = $$[$0].substr(0,$$[$0].length);
                                         text2=text2.replace(/\\n/g,"\n");
                                         text2=text2.replace(/\\t/g,"\t");
                                         text2=text2.replace(/\\r/g,"\r");
                                         text2=text2.replace(/\\\\/g,"\\");
                                         text2=text2.replace(/\\\"/g,"\"");
                                         text2=text2.replace(/\\\'/g,"\'");
                                        this.$.addChilds(new AST_Node("char",text2,this._$.first_line,_$[$0].last_column));
break;
case 133:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("entero",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 134:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("decimal",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 135:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("true",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 136:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("false",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 137:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 138:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("tolower",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 139:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("toupper",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 140:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("round",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 141:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("typeof",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 142:
this.$= new AST_Node("acceso_vector","acceso_vector",this._$.first_line,_$[$0-3].last_column);this.$.addChilds($$[$0-3],$$[$0-1]);
break;
case 143:
this.$= new AST_Node("acceso_vector2","acceso_vector2",this._$.first_line,_$[$0-6].last_column);this.$.addChilds($$[$0-6],$$[$0-4],$$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},{1:[3]},{5:[1,43],6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},o($Vi,[2,3]),{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),{8:[1,52]},o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),{29:53,41:$Vj},{29:55,41:$Vj},{29:56,41:$Vj},{29:57,41:$Vj},{29:58,41:$Vj},{30:[1,59],40:$Vk},o($Vl,$Vm,{36:[1,63],42:[1,61],43:[1,62],50:[1,64]}),{4:65,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,45:[1,66],49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},{50:[1,67]},{50:[1,68]},{15:69,44:$V6},{50:[1,70]},{50:[1,71]},{50:[1,72]},{50:[1,73]},{41:[1,74]},{8:[1,75]},{8:[1,76]},{8:[1,77]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,14]),{8:$Vn,30:$Vo,36:[1,79],40:$Vk},o($Vp,$Vm),{8:$Vq,30:$Vr,36:[1,81],40:$Vk},{8:$Vs,30:$Vt,36:[1,83],40:$Vk},{8:$Vu,30:$Vv,36:[1,85],40:$Vk},{8:$Vw,30:$Vx,36:[1,87],40:$Vk},{31:88,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{41:[1,106]},{42:[1,107]},{43:[1,108]},{31:109,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{51:[1,110]},{6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,45:[1,111],49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},o($VN,[2,62]),{31:112,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:113,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{58:[1,114]},{31:115,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:116,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:117,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{7:118,10:119,28:[1,120],32:[1,121],33:[1,122],34:[1,123],35:[1,124]},{50:[1,125]},o($Vi,[2,102]),o($Vi,[2,103]),o($Vi,[2,104]),{31:126,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,127]},{31:128,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,129]},{31:130,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,131]},{31:132,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,133]},{31:134,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,135]},o([8,51],[2,58],{42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$}),o($V01,[2,119]),o($V01,[2,120]),{31:150,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{28:[1,152],31:151,32:[1,153],35:[1,154],41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61},o($V01,[2,131]),o($V01,[2,132]),o($V01,[2,133]),o($V01,[2,134]),o($V01,[2,135]),o($V01,[2,136]),o($V01,[2,137],{36:[1,161]}),{50:[1,162]},{50:[1,163]},{50:[1,164]},{50:[1,165]},{50:[1,166]},o($Vp,[2,56]),{8:[2,59]},{8:[2,60]},{37:[1,167],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{8:[1,169],15:168,44:$V6},o($VN,[2,61]),{42:$VO,43:$VP,51:[1,170],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,171],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{50:[1,172]},{42:$VO,43:$VP,51:[1,173],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,174],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,175],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{8:[1,176]},{8:[1,177]},{29:178,41:$Vj},{29:179,41:$Vj},{29:180,41:$Vj},{29:181,41:$Vj},{29:182,41:$Vj},{51:[1,183]},{8:[2,24],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{30:[1,184],36:[1,185]},{8:[2,25],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{30:[1,186],36:[1,187]},{8:[2,26],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{30:[1,188],36:[1,189]},{8:[2,27],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{30:[1,190],36:[1,191]},{8:[2,28],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{30:[1,192],36:[1,193]},{31:194,41:$Vy,42:[1,195],43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:196,41:$Vy,43:[1,197],50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:198,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:199,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:200,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:201,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:202,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:203,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:204,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:205,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:206,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:207,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:208,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:209,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($V01,[2,123]),{42:$VO,43:$VP,51:[1,210],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{51:[1,211]},{51:[1,212]},{51:[1,213]},o($V01,[2,125]),o($V01,[2,126]),o($V01,[2,127]),o($V01,[2,128]),o($V01,[2,129]),o($V01,[2,130]),{31:214,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:215,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:216,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:217,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:218,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:219,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{30:[1,220],36:[1,221]},o($Vi,[2,84]),o($Vi,[2,86]),{15:222,44:$V6},{15:223,44:$V6},{31:224,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{8:[1,225]},{8:[1,226]},{44:[1,227]},{31:228,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:229,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{8:$Vn,30:$Vo,40:$Vk},{8:$Vq,30:$Vr,40:$Vk},{8:$Vs,30:$Vt,40:$Vk},{8:$Vu,30:$Vv,40:$Vk},{8:$Vw,30:$Vx,40:$Vk},{8:[1,231],15:230,44:$V6},{36:[1,233],38:[1,232]},{37:[1,234]},{36:[1,236],38:[1,235]},{37:[1,237]},{36:[1,239],38:[1,238]},{37:[1,240]},{36:[1,242],38:[1,241]},{37:[1,243]},{36:[1,245],38:[1,244]},{37:[1,246]},o($V71,[2,105],{77:$VW,78:$VX,79:$VY,80:$VZ}),o($V01,[2,121]),o($V71,[2,106],{77:$VW,78:$VX,79:$VY,80:$VZ}),o($V01,[2,122],{84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61}),o($V81,[2,107],{79:$VY}),o($V81,[2,108],{79:$VY}),o($V81,[2,109],{79:$VY}),o($V81,[2,110],{79:$VY}),o($V91,[2,111],{42:$VO,43:$VP,66:[1,247],68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ}),o($V91,[2,112],{42:$VO,43:$VP,66:[1,248],68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ}),o($V91,[2,113],{42:$VO,43:$VP,66:[1,249],77:$VW,78:$VX,79:$VY,80:$VZ}),o($V91,[2,114],{42:$VO,43:$VP,66:[1,250],77:$VW,78:$VX,79:$VY,80:$VZ}),o($V91,[2,115],{42:$VO,43:$VP,66:[1,251],77:$VW,78:$VX,79:$VY,80:$VZ}),o($V91,[2,116],{42:$VO,43:$VP,66:[1,252],77:$VW,78:$VX,79:$VY,80:$VZ}),o([8,37,40,51,55,66,81,82],[2,117],{42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ}),o([8,37,40,51,55,66,82],[2,118],{42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_}),o($V01,[2,124]),{31:253,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:254,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:255,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,256],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,257],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,258],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,259],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,260],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,261],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{31:262,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:263,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($Vi,[2,66],{46:265,47:266,48:[1,264]}),o($Vi,[2,76]),{42:$VO,43:$VP,51:[1,267],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},o($Vi,[2,88]),o($Vi,[2,89]),{52:268,53:270,54:$Va1,57:[1,269]},{8:[1,272],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{8:[1,273],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},o($Vi,[2,85]),o($Vi,[2,87]),{28:[1,274]},{31:276,39:275,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{30:[1,277]},{32:[1,278]},{31:276,39:279,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{30:[1,280]},{33:[1,281]},{31:276,39:282,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{30:[1,283]},{34:[1,284]},{31:276,39:285,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{30:[1,286]},{35:[1,287]},{31:276,39:288,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{30:[1,289]},{31:290,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:291,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:292,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:293,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:294,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:295,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($Vb1,[2,98],{42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$}),o($Vb1,[2,99],{42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$}),o($Vb1,[2,100],{42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$}),o($V01,[2,142],{36:[1,296]}),o($V01,[2,138]),o($V01,[2,139]),o($V01,[2,140]),o($V01,[2,141]),o($V01,[2,101]),{8:[2,90],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{37:[1,297],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{15:298,44:$V6,49:$Vc1},o($Vi,[2,68],{47:301,48:[1,300]}),o($VN,[2,64]),{8:[2,77]},{45:[1,302],53:304,54:$Va1,57:[1,303]},{55:[1,305]},o($Vd1,[2,71]),{31:306,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{9:307,29:29,41:[1,308]},{9:309,29:29,41:[1,310]},{36:[1,311]},{37:[1,312],40:$Ve1},o($Vf1,[2,50],{42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$}),{36:[1,315],38:[1,314]},{36:[1,316]},{37:[1,317],40:$Ve1},{36:[1,319],38:[1,318]},{36:[1,320]},{37:[1,321],40:$Ve1},{36:[1,323],38:[1,322]},{36:[1,324]},{37:[1,325],40:$Ve1},{36:[1,327],38:[1,326]},{36:[1,328]},{37:[1,329],40:$Ve1},{36:[1,331],38:[1,330]},{42:$VO,43:$VP,55:[1,332],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,55:[1,333],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,55:[1,334],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,55:[1,335],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,55:[1,336],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,55:[1,337],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{31:338,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{30:[1,339]},o($Vi,[2,67]),{50:[1,340]},{15:341,44:$V6,49:$Vc1},o($VN,[2,63]),o($Vi,[2,73]),{55:[1,342]},o($Vd1,[2,70]),{4:343,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},{42:$VO,43:$VP,55:[1,344],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{51:[1,345]},o($Vl,$Vm,{42:[1,346],43:[1,347]}),{51:[1,348]},o($Vl,$Vm,{42:[1,349],43:[1,350]}),{31:351,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{8:[2,39]},{31:352,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{28:[1,353]},{36:[1,354]},{31:355,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{8:[2,40]},{32:[1,356]},{36:[1,357]},{31:358,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{8:[2,41]},{33:[1,359]},{36:[1,360]},{31:361,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{8:[2,42]},{34:[1,362]},{36:[1,363]},{31:364,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{8:[2,43]},{35:[1,365]},{36:[1,366]},{31:367,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:368,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:369,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:370,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:371,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:372,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,373],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{31:374,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:375,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($Vi,[2,69]),{4:376,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},{6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,45:[1,377],49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},{4:378,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},{15:379,44:$V6},{42:[1,380]},{43:[1,381]},{15:382,44:$V6},{42:[1,383]},{43:[1,384]},{37:[1,385],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},o($Vf1,[2,49],{42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$}),{36:[1,386]},{31:276,39:387,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,388],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{36:[1,389]},{31:276,39:390,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,391],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{36:[1,392]},{31:276,39:393,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,394],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{36:[1,395]},{31:276,39:396,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,397],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{36:[1,398]},{31:276,39:399,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},o($Vg1,[2,93],{42:$VO,43:$VP,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ}),o($Vg1,[2,92],{42:$VO,43:$VP,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ}),o($Vg1,[2,96],{42:$VO,43:$VP,77:$VW,78:$VX,79:$VY,80:$VZ}),o($Vg1,[2,94],{42:$VO,43:$VP,77:$VW,78:$VX,79:$VY,80:$VZ}),o($Vg1,[2,97],{42:$VO,43:$VP,77:$VW,78:$VX,79:$VY,80:$VZ}),o($Vg1,[2,95],{42:$VO,43:$VP,77:$VW,78:$VX,79:$VY,80:$VZ}),o($V01,[2,143]),{8:[2,91],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{42:$VO,43:$VP,51:[1,400],65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:$V0,29:29,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,45:[1,401],49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh},o($Vi,[2,75]),o($Vd1,[2,72],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,29:29,6:44,28:$V0,32:$V1,33:$V2,34:$V3,35:$V4,41:$V5,44:$V6,49:$V7,56:$V8,58:$V9,59:$Va,60:$Vb,61:$Vc,62:$Vd,63:$Ve,74:$Vf,75:$Vg,76:$Vh}),o($Vi,[2,78]),{51:[1,402]},{51:[1,403]},o($Vi,[2,81]),{51:[1,404]},{51:[1,405]},{8:[2,29]},{31:406,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,407],40:$Ve1},{8:[2,30]},{31:408,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,409],40:$Ve1},{8:[2,31]},{31:410,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,411],40:$Ve1},{8:[2,32]},{31:412,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,413],40:$Ve1},{8:[2,33]},{31:414,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,415],40:$Ve1},{15:416,44:$V6},o($Vi,[2,74]),{15:417,44:$V6},{15:418,44:$V6},{15:419,44:$V6},{15:420,44:$V6},{37:[1,421],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{40:[1,422]},{37:[1,423],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{40:[1,424]},{37:[1,425],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{40:[1,426]},{37:[1,427],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{40:[1,428]},{37:[1,429],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{40:[1,430]},o($VN,[2,65]),o($Vi,[2,79]),o($Vi,[2,80]),o($Vi,[2,82]),o($Vi,[2,83]),{36:[1,431]},{36:[1,432]},{36:[1,433]},{36:[1,434]},{36:[1,435]},{36:[1,436]},{36:[1,437]},{36:[1,438]},{36:[1,439]},{36:[1,440]},{31:441,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:276,39:442,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:443,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:276,39:444,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:445,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:276,39:446,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:447,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:276,39:448,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:449,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{31:276,39:450,41:$Vy,43:$Vz,50:$VA,64:89,72:90,73:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM},{37:[1,451],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{37:[1,452],40:$Ve1},{37:[1,453],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{37:[1,454],40:$Ve1},{37:[1,455],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{37:[1,456],40:$Ve1},{37:[1,457],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{37:[1,458],40:$Ve1},{37:[1,459],42:$VO,43:$VP,65:$VQ,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$},{37:[1,460],40:$Ve1},{8:[2,34]},{37:[1,461]},{8:[2,35]},{37:[1,462]},{8:[2,36]},{37:[1,463]},{8:[2,37]},{37:[1,464]},{8:[2,38]},{37:[1,465]},{8:[2,44]},{8:[2,45]},{8:[2,46]},{8:[2,47]},{8:[2,48]}],
defaultActions: {43:[2,1],107:[2,59],108:[2,60],267:[2,77],312:[2,39],317:[2,40],321:[2,41],325:[2,42],329:[2,43],385:[2,29],388:[2,30],391:[2,31],394:[2,32],397:[2,33],451:[2,34],453:[2,35],455:[2,36],457:[2,37],459:[2,38],461:[2,44],462:[2,45],463:[2,46],464:[2,47],465:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function AST_Node(tag,value,fila,columna){
        this.tag=tag;
        this.value=value;
        this.fila=fila;
        this.columna=columna;
        //Vamos a definir que tenga hijos
        this.childs=[]
        this.addChilds=addChilds;
        this.getSon=getSon;
        function addChilds(){
            for(var i =0; i< arguments.length;i++){
                this.childs.push(arguments[i]);
                if(arguments[i]!==null){
                    arguments[i].padre=this;
                }
            }
        }
        function getSon(pos){
            if(pos >this.hijos.length - 1)return null;
            return this.hijos[pos];
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran los espacios en blanco
break;
case 1:// comentarios de simple linea
break;
case 2://comentarios multilineas
break;
case 3:return 86
break;
case 4:return 87
break;
case 5:return 49
break;
case 6:return 62 
break;
case 7:return 63 
break;
case 8:return 48  
break;
case 9:return 58 
break;
case 10:return 59
break;
case 11:return 90
break;
case 12:return 91
break;
case 13:return 73
break;
case 14:return 56
break;
case 15:return 54
break;
case 16:return 57
break;
case 17:return 60  
break;
case 18:return 61
break;
case 19:return 92
break;
case 20:return 93
break;
case 21:return 74
break;
case 22:return 75
break;
case 23:return 76
break;
case 24:return 38
break;
case 25:return 28
break;
case 26:return 32
break;
case 27:return 33
break;
case 28:return 35
break;
case 29:return 34
break;
case 30:return 71
break;
case 31:return 69
break;
case 32:return 65
break;
case 33:return 8
break;
case 34:return 40
break;
case 35:return 30
break;
case 36:return 36
break;
case 37:return 37
break;
case 38:return 50
break;
case 39:return 51
break;
case 40:return 44
break;
case 41:return 45
break;
case 42:return 43
break;
case 43:return 67
break;
case 44:return 83
break;
case 45:return 79
break;
case 46:return 77
break;
case 47:return 78
break;
case 48:return 80
break;
case 49:return 42
break;
case 50:return 70
break;
case 51:return 68
break;
case 52:return 81
break;
case 53:return 82
break;
case 54:return 66
break;
case 55:return 55
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 88; 
break;
case 57: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 89; 
break;
case 58:return 85;
break;
case 59:return 41;
break;
case 60:return 84;
break;
case 61:return 5;
break;
case 62: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                          L_Error.getInstance().insertar(new N_Error("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                          return null; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:toString\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:run\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:-)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\+)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\?)/i,/^(?::)/i,/^(?:[\"](\\n|\\r|\\t|\\'|\\"|\\\\|[^\"])*[\"])/i,/^(?:[\'](\\n|\\r|\\t|\\'|\\"|\\\\|[^\'])[\'])/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}