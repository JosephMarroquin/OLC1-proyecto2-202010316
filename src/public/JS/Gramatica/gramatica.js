/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,38],$V9=[1,34],$Va=[1,35],$Vb=[1,39],$Vc=[1,40],$Vd=[1,36],$Ve=[1,37],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[5,29,33,34,35,36,42,45,46,50,55,57,58,59,60,61,62,66,67,79,80,81],$Vj=[1,56],$Vk=[1,62],$Vl=[31,41],$Vm=[2,59],$Vn=[2,53],$Vo=[1,80],$Vp=[8,31,37,41],$Vq=[2,54],$Vr=[1,82],$Vs=[2,55],$Vt=[1,84],$Vu=[2,56],$Vv=[1,86],$Vw=[2,57],$Vx=[1,88],$Vy=[1,102],$Vz=[1,95],$VA=[1,94],$VB=[1,109],$VC=[1,93],$VD=[1,98],$VE=[1,99],$VF=[1,100],$VG=[1,101],$VH=[1,96],$VI=[1,97],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,119],$VQ=[1,120],$VR=[1,121],$VS=[1,122],$VT=[1,123],$VU=[5,29,33,34,35,36,42,45,46,49,50,55,57,58,59,60,61,62,66,67,79,80,81],$VV=[1,149],$VW=[1,150],$VX=[1,156],$VY=[1,155],$VZ=[1,158],$V_=[1,160],$V$=[1,157],$V01=[1,159],$V11=[1,151],$V21=[1,152],$V31=[1,153],$V41=[1,154],$V51=[1,161],$V61=[1,162],$V71=[8,38,41,43,44,52,56,70,71,72,73,74,75,76,82,83,84,85,86,87],$V81=[1,168],$V91=[1,169],$Va1=[1,170],$Vb1=[1,171],$Vc1=[1,172],$Vd1=[1,173],$Ve1=[1,187],$Vf1=[1,189],$Vg1=[41,52],$Vh1=[8,38,41,43,44,52,56,70,71,72,73,74,75,76,86,87],$Vi1=[8,38,41,43,44,52,56,70,71,72,73,74,75,76,82,83,85,86,87],$Vj1=[8,38,41,52,56,70,72,86,87],$Vk1=[1,311],$Vl1=[8,38,41,52,56,71],$Vm1=[1,344],$Vn1=[46,55,58],$Vo1=[1,360],$Vp1=[38,41],$Vq1=[8,38,41,52,56,70,71,72,86,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DECLARACION":7,"Tok_pyc":8,"ASIGNACION":9,"DECLARACIONyASIGNACION":10,"DECLARACION_VECTORES":11,"DECLARACION_VECTORES_TIPO2":12,"INCREMENTO_DECREMENTO":13,"MODIFICA_VECTOR":14,"VECTOR_CHAR":15,"BLOQUE":16,"IF":17,"WHILE":18,"DO_WHILE":19,"PRINT":20,"PRINTLN":21,"SWITCH":22,"FOR":23,"METODOS":24,"LLAMADAS":25,"BREAK":26,"CONTINUE":27,"RETURN":28,"Tok_TD_int":29,"ID_LIST":30,"Tok_asigna1":31,"EXP":32,"Tok_TD_double":33,"Tok_TD_boolean":34,"Tok_TD_string":35,"Tok_TD_char":36,"Tok_cor1":37,"Tok_cor2":38,"Tok_new":39,"VECTOR_LIST":40,"Tok_coma":41,"Tok_ID":42,"Tok_mas":43,"Tok_menos":44,"Tok_llav1":45,"Tok_llav2":46,"elif_list":47,"elif":48,"Tok_else":49,"Tok_if":50,"Tok_par1":51,"Tok_par2":52,"CASE_LIST":53,"CASE":54,"Tok_case":55,"Tok_dospuntos":56,"Tok_switch":57,"Tok_default":58,"Tok_while":59,"Tok_do":60,"Tok_for":61,"Tok_run":62,"Tok_void":63,"LISTA_PARAMETROS":64,"LISTA_EXP":65,"Tok_print":66,"Tok_println":67,"TIPO_IDENTIFICADOR":68,"OPTERNARIO":69,"Tok_igual":70,"Tok_interrogacion":71,"Tok_diferente":72,"Tok_menor":73,"Tok_menori":74,"Tok_mayor":75,"Tok_mayori":76,"CASTEOS":77,"Tok_tostring":78,"Tok_break":79,"Tok_continue":80,"Tok_return":81,"Tok_por":82,"Tok_div":83,"Tok_pot":84,"Tok_mod":85,"Tok_and":86,"Tok_or":87,"Tok_not":88,"ENTERO":89,"Tok_numero":90,"Tok_true":91,"Tok_false":92,"Tok_string":93,"Tok_char":94,"Tok_toLower":95,"Tok_toupper":96,"Tok_round":97,"Tok_typeof":98,"Tok_length":99,"Tok_tochararray":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"Tok_pyc",29:"Tok_TD_int",31:"Tok_asigna1",33:"Tok_TD_double",34:"Tok_TD_boolean",35:"Tok_TD_string",36:"Tok_TD_char",37:"Tok_cor1",38:"Tok_cor2",39:"Tok_new",41:"Tok_coma",42:"Tok_ID",43:"Tok_mas",44:"Tok_menos",45:"Tok_llav1",46:"Tok_llav2",49:"Tok_else",50:"Tok_if",51:"Tok_par1",52:"Tok_par2",55:"Tok_case",56:"Tok_dospuntos",57:"Tok_switch",58:"Tok_default",59:"Tok_while",60:"Tok_do",61:"Tok_for",62:"Tok_run",63:"Tok_void",66:"Tok_print",67:"Tok_println",70:"Tok_igual",71:"Tok_interrogacion",72:"Tok_diferente",73:"Tok_menor",74:"Tok_menori",75:"Tok_mayor",76:"Tok_mayori",78:"Tok_tostring",79:"Tok_break",80:"Tok_continue",81:"Tok_return",82:"Tok_por",83:"Tok_div",84:"Tok_pot",85:"Tok_mod",86:"Tok_and",87:"Tok_or",88:"Tok_not",89:"ENTERO",90:"Tok_numero",91:"Tok_true",92:"Tok_false",93:"Tok_string",94:"Tok_char",95:"Tok_toLower",96:"Tok_toupper",97:"Tok_round",98:"Tok_typeof",99:"Tok_length",100:"Tok_tochararray"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,4],[10,4],[10,4],[10,4],[10,4],[15,6],[11,10],[11,10],[11,10],[11,10],[11,10],[11,15],[11,15],[11,15],[11,15],[11,15],[12,8],[12,8],[12,8],[12,8],[12,8],[12,16],[12,16],[12,16],[12,16],[12,16],[40,3],[40,1],[7,2],[7,2],[7,2],[7,2],[7,2],[30,3],[30,1],[9,3],[13,3],[13,3],[16,3],[16,2],[47,2],[47,1],[48,6],[17,5],[17,7],[17,6],[17,8],[53,2],[53,1],[54,4],[22,7],[22,10],[22,9],[18,5],[19,6],[23,9],[23,11],[23,11],[23,9],[23,11],[23,11],[24,4],[24,5],[24,6],[24,7],[24,5],[24,6],[24,7],[24,8],[25,4],[25,5],[25,5],[25,6],[65,3],[65,1],[20,5],[21,5],[14,6],[14,9],[64,4],[64,2],[68,1],[68,1],[68,1],[68,1],[68,1],[69,7],[69,7],[69,7],[69,7],[69,7],[69,7],[77,4],[77,4],[77,4],[77,4],[26,2],[27,2],[28,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,1],[32,3],[32,3],[32,2],[32,3],[32,2],[32,2],[32,2],[32,2],[32,2],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,4],[32,4],[32,4],[32,4],[32,4],[32,7],[32,4],[32,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new AST_Node("RAIZ","RAIZ",this.$first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-1]);return this.$
break;
case 2:
$$[$0-1].addChilds($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$= new AST_Node("SENTENCIAS","SENTENCIAS",this._$.first_line,_$[$0].last_column);
                      this.$.addChilds($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 15: case 143:
this.$=$$[$0-1]
break;
case 12: case 13: case 14: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 106: case 107: case 108: case 109: case 110: case 138: case 139:
this.$=$$[$0]
break;
case 25: case 26: case 27: case 28: case 29:
this.$=new AST_Node("DECLARACIONyASIGNACION","DECLARACIONyASIGNACION",this._$.first_line,_$[$0-3].last_column);
                                                                   this.$.addChilds($$[$0-2],$$[$0],$$[$0-3]);
break;
case 30:
this.$=new AST_Node("VECTOR_CHAR","VECTOR_CHAR",this._$.first_line,_$[$0-5].last_column); this.$.addChilds($$[$0-4],$$[$0]);
break;
case 31: case 32: case 33: case 34: case 35:
this.$=new AST_Node("DECLARACION_VECTORES","DECLARACION_VECTORES",this._$.first_line,_$[$0-9].last_column);
                                                                   this.$.addChilds($$[$0-9],$$[$0-8],$$[$0-1]);
break;
case 36: case 37: case 38: case 39: case 40:
this.$=new AST_Node("DECLARACION_VECTORES2","DECLARACION_VECTORES2",this._$.first_line,_$[$0-14].last_column);
                                                                   this.$.addChilds($$[$0-14],$$[$0-13],$$[$0-4],$$[$0-1]);
break;
case 41: case 42: case 43: case 44: case 45:
this.$=new AST_Node("DECLARACION_VECTORES_TIPO2","DECLARACION_VECTORES_TIPO2",this._$.first_line,_$[$0-7].last_column);
                                                                   this.$.addChilds($$[$0-7],$$[$0-6],$$[$0-1]);
break;
case 46: case 47: case 48: case 49: case 50:
this.$=new AST_Node("DECLARACION_VECTORES_TIPO22","DECLARACION_VECTORES_TIPO22",this._$.first_line,_$[$0-15].last_column);
                                                                   this.$.addChilds($$[$0-15],$$[$0-14],$$[$0-6],$$[$0-2]);
break;
case 51:
$$[$0-2].addChilds($$[$0]); this.$=$$[$0-2];
break;
case 52:
this.$= new AST_Node("VECTOR_LIST","VECTOR_LIST"); this.$.addChilds($$[$0])
break;
case 53: case 54: case 55: case 56: case 57:
this.$= new AST_Node("DECLARACION","DECLARACION",this._$.first_line,_$[$0-1].first_column); this.$.addChilds($$[$0],$$[$0-1])
break;
case 58:
$$[$0-2].addChilds(new AST_Node("ID",$$[$0],this._$.first_line,_$[$0].first_column)); this.$=$$[$0-2];
break;
case 59:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addChilds(new AST_Node("ID",$$[$0],this._$.first_line,_$[$0].first_column))
break;
case 60:
this.$=new AST_Node("ASIGNACION","ASIGNACION",this._$.first_line,_$[$0-2].last_column); 
                                            this.$.addChilds($$[$0-2],$$[$0]);
break;
case 61:
this.$=new AST_Node("ASIGNACION_INCREMENTO","ASIGNACION_INCREMENTO",this._$.first_line,_$[$0-2].last_column); 
                                            this.$.addChilds(new AST_Node("ID",$$[$0-2],this._$.first_line,_$[$0-2].first_column));
break;
case 62:
this.$=new AST_Node("ASIGNACION_DECREMENTO","ASIGNACION_DECREMENTO",this._$.first_line,_$[$0-2].last_column); 
                                            this.$.addChilds(new AST_Node("ID",$$[$0-2],this._$.first_line,_$[$0-2].first_column));
break;
case 63:
this.$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,_$[$0-2].last_column); this.$.addChilds($$[$0-1])
break;
case 64:
this.$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,_$[$0-1].last_column);
break;
case 65: case 72:
$$[$0-1].addChilds($$[$0]);this.$=$$[$0-1]
break;
case 66:
this.$=new AST_Node("elif_list","elif_list",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0]);
break;
case 67:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-2],$$[$0])
break;
case 68:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-2],$$[$0])
break;
case 69:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-6].last_column);this.$.addChilds($$[$0-4],$$[$0-2],$$[$0])
break;
case 70:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-3],$$[$0-1],$$[$0],"elif")
break;
case 71:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-7].last_column);this.$.addChilds($$[$0-5],$$[$0-3],$$[$0-2],$$[$0])
break;
case 73:
this.$=new AST_Node("CASE_LIST","CASE_LIST",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0]);
break;
case 74:
this.$= new AST_Node("CASE","CASE",this._$.first_line,_$[$0-3].last_column);this.$.addChilds($$[$0-2],$$[$0])
break;
case 75:
this.$= new AST_Node("SWITCH","SWITCH",this._$.first_line,_$[$0-6].last_column);this.$.addChilds($$[$0-4],$$[$0-1])
break;
case 76:
this.$= new AST_Node("SWITCH","SWITCH",this._$.first_line,_$[$0-9].last_column);this.$.addChilds($$[$0-7],$$[$0-4],$$[$0-1])
break;
case 77:
this.$= new AST_Node("DEFAULT","DEFAULT",this._$.first_line,_$[$0-8].last_column);this.$.addChilds($$[$0-6],$$[$0-1])
break;
case 78:
this.$=new AST_Node("WHILE","WHILE",this._$.first_line,_$[$0-4].last_column); this.$.addChilds($$[$0-2],$$[$0])
break;
case 79:
this.$=new AST_Node("DO_WHILE","DO_WHILE",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-4],$$[$0-1])
break;
case 80:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-8].last_column); this.$.addChilds($$[$0-6],$$[$0-4],$$[$0-2],$$[$0])
break;
case 81:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-10].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-4],$$[$0],"incremento")
break;
case 82:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-10].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-4],$$[$0],"decremento")
break;
case 83:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-8].last_column); this.$.addChilds($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],"asigna")
break;
case 84:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-10].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-4],$$[$0],"asigna_incre")
break;
case 85:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-10].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-4],$$[$0],"asigna_decre")
break;
case 86:
this.$=new AST_Node("METODO_SIN_PA","METODO_SIN_PA",this._$.first_line,_$[$0-3].last_column);this.$.addChilds($$[$0-3],$$[$0]);
break;
case 87:
this.$=new AST_Node("METODO_SIN_RUN","METODO_SIN_RUN",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-3],$$[$0]);
break;
case 88:
this.$=new AST_Node("METODO_SIN_PA","METODO_SIN_PA",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-5],$$[$0]);
break;
case 89:
this.$=new AST_Node("METODO_SIN_RUN","METODO_SIN_RUN",this._$.first_line,_$[$0-6].last_column);this.$.addChilds($$[$0-5],$$[$0]);
break;
case 90:
this.$=new AST_Node("METODO_CON_PA","METODO_CON_PA",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-4],$$[$0-2],$$[$0]);
break;
case 91:
this.$=new AST_Node("METODO_CON_RUN","METODO_CON_RUN",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-4],$$[$0-2],$$[$0]);
break;
case 92:
this.$=new AST_Node("METODO_CON_PA","METODO_CON_PA",this._$.first_line,_$[$0-6].last_column);this.$.addChilds($$[$0-6],$$[$0-4],$$[$0]);
break;
case 93:
this.$=new AST_Node("METODO_CON_RUN","METODO_CON_RUN",this._$.first_line,_$[$0-7].last_column);this.$.addChilds($$[$0-6],$$[$0-4],$$[$0]);
break;
case 94:
this.$=new AST_Node("LLAMADA_MSIN_PA","LLAMADA_MSIN_PA",this._$.first_line,_$[$0-3].last_column);this.$.addChilds($$[$0-3]);
break;
case 95:
this.$=new AST_Node("LLAMADA_MSIN_RUN","LLAMADA_MSIN_RUN",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-3]);
break;
case 96:
this.$=new AST_Node("LLAMADA_MCON_PA","LLAMADA_MCON_PA",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-4],$$[$0-2]);
break;
case 97:
this.$=new AST_Node("LLAMADA_MCON_RUN","LLAMADA_MCON_RUN",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-4],$$[$0-2]);
break;
case 98:
$$[$0-2].addChilds($$[$0]);this.$=$$[$0-2]
break;
case 99:
this.$=new AST_Node("LISTA_EXP","LISTA_EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0]);
break;
case 100:
this.$= new AST_Node("PRINT","PRINT",this._$.first_line,_$[$0-4].last_column); this.$.addChilds($$[$0-2]);
break;
case 101:
this.$= new AST_Node("PRINTLN","PRINTLN",this._$.first_line,_$[$0-4].last_column); this.$.addChilds($$[$0-2]);
break;
case 102:
this.$=new AST_Node("MODIFICA_VECTOR","MODIFICA_VECTOR",this._$.first_line,_$[$0-5].last_column); this.$.addChilds($$[$0-5],$$[$0-3],$$[$0]);
break;
case 103:
this.$=new AST_Node("MODIFICA_VECTOR2","MODIFICA_VECTOR2",this._$.first_line,_$[$0-8].last_column); this.$.addChilds($$[$0-8],$$[$0-6],$$[$0-3],$$[$0]);
break;
case 104:
$$[$0-3].addChilds($$[$0-1],$$[$0]);this.$=$$[$0-3]
break;
case 105:
this.$=new AST_Node("LISTA_PARAMETROS","LISTA_PARAMETROS",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-1],$$[$0]);
break;
case 111: case 112: case 113: case 114: case 115: case 116:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-5].last_column);this.$.addChilds($$[$0-6],new AST_Node("op",$$[$0-5],this._$.first_line,_$[$0-5].last_column),$$[$0-4],$$[$0-2],$$[$0]);
break;
case 117:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("casteo_entero",$$[$0],this._$.first_line,_$[$0-3].last_column));
break;
case 118:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("casteo_double",$$[$0],this._$.first_line,_$[$0-3].last_column));
break;
case 119:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("casteo_char",$$[$0],this._$.first_line,_$[$0-3].last_column));
break;
case 120:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("casteo_string",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 121:
this.$= new AST_Node("BREAK","BREAK",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1]);
break;
case 122:
this.$= new AST_Node("CONTINUE","CONTINUE",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1]);
break;
case 123:
this.$= new AST_Node("RETURN","RETURN",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1]);
break;
case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-2],new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 140:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-2].last_column);this.$.addChilds(new AST_Node("incremento",$$[$0-2],this._$.first_line,_$[$0-2].last_column));
break;
case 141:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-2].last_column);this.$.addChilds(new AST_Node("decremento",$$[$0-2],this._$.first_line,_$[$0-2].last_column));
break;
case 142:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 144:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds(new AST_Node("entero",$$[$0]*-1,this._$.first_line,_$[$0-1].last_column));
break;
case 145:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds(new AST_Node("decimal",$$[$0]*-1,this._$.first_line,_$[$0-1].last_column));
break;
case 146: case 147: case 148: case 149:
L_Error.getInstance().insertar(new N_Error("Semantico","No esta permitida la negacion unario en esta expresion" ,this._$.first_line,_$[$0-1].last_column));
break;
case 150:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);
                                         var text = $$[$0].substr(0,$$[$0].length);
                                         text=text.replace(/\\n/g,"\n");
                                         text=text.replace(/\\t/g,"\t");
                                         text=text.replace(/\\r/g,"\r");
                                         text=text.replace(/\\\\/g,"\\");
                                         text=text.replace(/\\\"/g,"\"");
                                         text=text.replace(/\\\'/g,"\'");
                                        this.$.addChilds(new AST_Node("string",text,this._$.first_line,_$[$0].last_column));
break;
case 151:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);
                                         var text2 = $$[$0].substr(0,$$[$0].length);
                                         text2=text2.replace(/\\n/g,"\n");
                                         text2=text2.replace(/\\t/g,"\t");
                                         text2=text2.replace(/\\r/g,"\r");
                                         text2=text2.replace(/\\\\/g,"\\");
                                         text2=text2.replace(/\\\"/g,"\"");
                                         text2=text2.replace(/\\\'/g,"\'");
                                        this.$.addChilds(new AST_Node("char",text2,this._$.first_line,_$[$0].last_column));
break;
case 152:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("entero",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 153:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("decimal",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 154:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("true",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 155:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("false",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 156:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 157:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("tolower",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 158:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("toupper",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 159:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("round",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 160:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("typeof",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 161:
this.$= new AST_Node("acceso_vector","acceso_vector",this._$.first_line,_$[$0-3].last_column);this.$.addChilds($$[$0-3],$$[$0-1]);
break;
case 162:
this.$= new AST_Node("acceso_vector2","acceso_vector2",this._$.first_line,_$[$0-6].last_column);this.$.addChilds($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 163:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("length",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
case 164:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-3].last_column);this.$.addChilds(new AST_Node("tochararray",$$[$0-1],this._$.first_line,_$[$0-3].last_column));
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},{1:[3]},{5:[1,44],6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},o($Vi,[2,3]),{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),{8:[1,54]},o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),{30:55,42:$Vj},{30:57,42:$Vj},{30:58,42:$Vj},{30:59,42:$Vj},{30:60,42:$Vj},{31:[1,61],41:$Vk},o($Vl,$Vm,{37:[1,65],43:[1,63],44:[1,64],51:[1,66]}),{4:67,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,46:[1,68],50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},{51:[1,69]},{51:[1,70]},{16:71,45:$V6},{51:[1,72]},{51:[1,73]},{51:[1,74]},{51:[1,75]},{42:[1,76]},{8:[1,77]},{8:[1,78]},{8:[1,79]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,15]),{8:$Vn,31:$Vo,37:[1,81],41:$Vk},o($Vp,$Vm),{8:$Vq,31:$Vr,37:[1,83],41:$Vk},{8:$Vs,31:$Vt,37:[1,85],41:$Vk},{8:$Vu,31:$Vv,37:[1,87],41:$Vk},{8:$Vw,31:$Vx,37:[1,89],41:$Vk},{32:90,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{42:[1,110]},{43:[1,111]},{44:[1,112]},{32:113,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{29:$VP,32:118,33:$VQ,34:$VR,35:$VS,36:$VT,42:$Vy,44:$Vz,51:$VA,52:[1,114],64:115,65:116,68:117,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,46:[1,124],50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},o($VU,[2,64]),{32:125,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:126,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{59:[1,127]},{32:128,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:129,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:130,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{7:131,10:132,29:[1,133],33:[1,134],34:[1,135],35:[1,136],36:[1,137]},{51:[1,138]},o($Vi,[2,121]),o($Vi,[2,122]),o($Vi,[2,123]),{32:139,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,140]},{32:141,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,142]},{32:143,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,144]},{32:145,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,146]},{32:147,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,148]},o([8,52],[2,60],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61}),o($V71,[2,138]),o($V71,[2,139]),{32:163,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{29:[1,165],32:164,33:[1,166],36:[1,167],42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1},o($V71,[2,150]),o($V71,[2,151]),o($V71,[2,152]),o($V71,[2,153]),o($V71,[2,154]),o($V71,[2,155]),o($V71,[2,156],{37:[1,174]}),{51:[1,175]},{51:[1,176]},{51:[1,177]},{51:[1,178]},{51:[1,179]},{51:[1,180]},{51:[1,181]},o($Vp,[2,58]),{8:[2,61]},{8:[2,62]},{38:[1,182],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{8:[1,185],16:183,45:$V6,56:[1,184]},{41:$Ve1,52:[1,186]},{41:$Vf1,52:[1,188]},{42:[1,190]},o($Vg1,[2,99],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61}),{42:[2,106]},{42:[2,107]},{42:[2,108]},{42:[2,109]},{42:[2,110]},o($VU,[2,63]),{43:$VV,44:$VW,52:[1,191],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,192],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{51:[1,193]},{43:$VV,44:$VW,52:[1,194],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,195],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,196],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{8:[1,197]},{8:[1,198]},{30:199,42:$Vj},{30:200,42:$Vj},{30:201,42:$Vj},{30:202,42:$Vj},{30:203,42:$Vj},{29:$VP,32:118,33:$VQ,34:$VR,35:$VS,36:$VT,42:$Vy,44:$Vz,51:$VA,52:[1,204],64:205,65:206,68:117,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:[2,25],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{31:[1,207],37:[1,208]},{8:[2,26],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{31:[1,209],37:[1,210]},{8:[2,27],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{31:[1,211],37:[1,212]},{8:[2,28],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{31:[1,213],37:[1,214]},{8:[2,29],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{31:[1,215],37:[1,216]},{32:217,42:$Vy,43:[1,218],44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:219,42:$Vy,44:[1,220],51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:221,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:222,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:223,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:224,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:225,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:226,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:227,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:228,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:229,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:230,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:231,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:232,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($V71,[2,142]),{43:$VV,44:$VW,52:[1,233],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{52:[1,234]},{52:[1,235]},{52:[1,236]},o($V71,[2,144]),o($V71,[2,145]),o($V71,[2,146]),o($V71,[2,147]),o($V71,[2,148]),o($V71,[2,149]),{32:237,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:238,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:239,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:240,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:241,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:242,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:243,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:244,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{31:[1,245],37:[1,246]},o($Vi,[2,86]),{63:[1,247]},o($Vi,[2,94]),{16:248,45:$V6,56:[1,249]},{29:$VP,33:$VQ,34:$VR,35:$VS,36:$VT,68:250},{8:[1,251]},{32:252,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($Vg1,[2,105]),{16:253,45:$V6},{16:254,45:$V6},{32:255,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:[1,256]},{8:[1,257]},{45:[1,258]},{32:259,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:260,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:$Vn,31:$Vo,41:$Vk},{8:$Vq,31:$Vr,41:$Vk},{8:$Vs,31:$Vt,41:$Vk},{8:$Vu,31:$Vv,41:$Vk},{8:$Vw,31:$Vx,41:$Vk},{8:[1,263],16:261,45:$V6,56:[1,262]},{41:$Ve1,52:[1,264]},{41:$Vf1,52:[1,265]},{37:[1,267],39:[1,266]},{38:[1,268]},{37:[1,270],39:[1,269]},{38:[1,271]},{37:[1,273],39:[1,272]},{38:[1,274]},{37:[1,276],39:[1,275]},{38:[1,277]},{32:280,37:[1,279],39:[1,278],42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,281]},o($Vh1,[2,124],{82:$V11,83:$V21,84:$V31,85:$V41}),o($V71,[2,140]),o($Vh1,[2,125],{82:$V11,83:$V21,84:$V31,85:$V41}),o($V71,[2,141],{89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1}),o($Vi1,[2,126],{84:$V31}),o($Vi1,[2,127],{84:$V31}),o($Vi1,[2,128],{84:$V31}),o($Vi1,[2,129],{84:$V31}),o($Vj1,[2,130],{43:$VV,44:$VW,71:[1,282],73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),o($Vj1,[2,131],{43:$VV,44:$VW,71:[1,283],73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),o($Vj1,[2,132],{43:$VV,44:$VW,71:[1,284],82:$V11,83:$V21,84:$V31,85:$V41}),o($Vj1,[2,133],{43:$VV,44:$VW,71:[1,285],82:$V11,83:$V21,84:$V31,85:$V41}),o($Vj1,[2,134],{43:$VV,44:$VW,71:[1,286],82:$V11,83:$V21,84:$V31,85:$V41}),o($Vj1,[2,135],{43:$VV,44:$VW,71:[1,287],82:$V11,83:$V21,84:$V31,85:$V41}),o([8,38,41,52,56,71,86,87],[2,136],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),o([8,38,41,52,56,71,87],[2,137],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51}),o($V71,[2,143]),{32:288,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:289,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:290,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,291],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,292],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,293],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,294],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,295],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,296],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,297],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,298],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{32:299,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:300,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{16:301,45:$V6},o($Vi,[2,90]),{63:[1,302]},{42:[1,303]},o($Vi,[2,96]),o($Vg1,[2,98],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61}),o($Vi,[2,68],{47:305,48:306,49:[1,304]}),o($Vi,[2,78]),{43:$VV,44:$VW,52:[1,307],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},o($Vi,[2,100]),o($Vi,[2,101]),{53:308,54:310,55:$Vk1,58:[1,309]},{8:[1,312],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{8:[1,313],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},o($Vi,[2,87]),{63:[1,314]},o($Vi,[2,95]),{16:315,45:$V6,56:[1,316]},{8:[1,317]},{29:[1,318]},{32:320,40:319,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{31:[1,321]},{33:[1,322]},{32:320,40:323,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{31:[1,324]},{34:[1,325]},{32:320,40:326,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{31:[1,327]},{35:[1,328]},{32:320,40:329,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{31:[1,330]},{36:[1,331]},{32:320,40:332,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:[2,30],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{31:[1,333]},{32:334,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:335,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:336,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:337,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:338,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:339,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($Vl1,[2,117],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61}),o($Vl1,[2,118],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61}),o($Vl1,[2,119],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61}),o($V71,[2,161],{37:[1,340]}),o($V71,[2,157]),o($V71,[2,158]),o($V71,[2,159]),o($V71,[2,160]),o($V71,[2,163]),o($V71,[2,164]),o($V71,[2,120]),{8:[2,102],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{38:[1,341],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},o($Vi,[2,88]),{16:342,45:$V6},o($Vg1,[2,104]),{16:343,45:$V6,50:$Vm1},o($Vi,[2,70],{48:346,49:[1,345]}),o($VU,[2,66]),{8:[2,79]},{46:[1,347],54:349,55:$Vk1,58:[1,348]},{56:[1,350]},o($Vn1,[2,73]),{32:351,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{9:352,30:30,42:[1,353]},{9:354,30:30,42:[1,355]},{16:356,45:$V6},o($Vi,[2,91]),{63:[1,357]},o($Vi,[2,97]),{37:[1,358]},{38:[1,359],41:$Vo1},o($Vp1,[2,52],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61}),{37:[1,362],39:[1,361]},{37:[1,363]},{38:[1,364],41:$Vo1},{37:[1,366],39:[1,365]},{37:[1,367]},{38:[1,368],41:$Vo1},{37:[1,370],39:[1,369]},{37:[1,371]},{38:[1,372],41:$Vo1},{37:[1,374],39:[1,373]},{37:[1,375]},{38:[1,376],41:$Vo1},{37:[1,378],39:[1,377]},{43:$VV,44:$VW,56:[1,379],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,56:[1,380],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,56:[1,381],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,56:[1,382],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,56:[1,383],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,56:[1,384],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{32:385,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{31:[1,386]},o($Vi,[2,92]),o($Vi,[2,69]),{51:[1,387]},{16:388,45:$V6,50:$Vm1},o($VU,[2,65]),o($Vi,[2,75]),{56:[1,389]},o($Vn1,[2,72]),{4:390,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},{43:$VV,44:$VW,56:[1,391],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{52:[1,392]},o($Vl,$Vm,{43:[1,393],44:[1,394]}),{52:[1,395]},o($Vl,$Vm,{43:[1,396],44:[1,397]}),o($Vi,[2,89]),{16:398,45:$V6},{32:399,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:[2,41]},{32:400,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{29:[1,401]},{37:[1,402]},{32:403,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:[2,42]},{33:[1,404]},{37:[1,405]},{32:406,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:[2,43]},{34:[1,407]},{37:[1,408]},{32:409,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:[2,44]},{35:[1,410]},{37:[1,411]},{32:412,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{8:[2,45]},{36:[1,413]},{37:[1,414]},{32:415,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:416,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:417,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:418,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:419,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:420,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,421],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{32:422,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:423,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($Vi,[2,71]),{4:424,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,46:[1,425],50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},{4:426,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},{16:427,45:$V6},{43:[1,428]},{44:[1,429]},{16:430,45:$V6},{43:[1,431]},{44:[1,432]},o($Vi,[2,93]),{38:[1,433],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},o($Vp1,[2,51],{43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61}),{37:[1,434]},{32:320,40:435,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,436],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{37:[1,437]},{32:320,40:438,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,439],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{37:[1,440]},{32:320,40:441,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,442],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{37:[1,443]},{32:320,40:444,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,445],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{37:[1,446]},{32:320,40:447,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($Vq1,[2,112],{43:$VV,44:$VW,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),o($Vq1,[2,111],{43:$VV,44:$VW,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),o($Vq1,[2,115],{43:$VV,44:$VW,82:$V11,83:$V21,84:$V31,85:$V41}),o($Vq1,[2,113],{43:$VV,44:$VW,82:$V11,83:$V21,84:$V31,85:$V41}),o($Vq1,[2,116],{43:$VV,44:$VW,82:$V11,83:$V21,84:$V31,85:$V41}),o($Vq1,[2,114],{43:$VV,44:$VW,82:$V11,83:$V21,84:$V31,85:$V41}),o($V71,[2,162]),{8:[2,103],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{43:$VV,44:$VW,52:[1,448],70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:30,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,46:[1,449],50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh},o($Vi,[2,77]),o($Vn1,[2,74],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,30:30,6:45,29:$V0,33:$V1,34:$V2,35:$V3,36:$V4,42:$V5,45:$V6,50:$V7,57:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,79:$Vf,80:$Vg,81:$Vh}),o($Vi,[2,80]),{52:[1,450]},{52:[1,451]},o($Vi,[2,83]),{52:[1,452]},{52:[1,453]},{8:[2,31]},{32:454,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,455],41:$Vo1},{8:[2,32]},{32:456,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,457],41:$Vo1},{8:[2,33]},{32:458,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,459],41:$Vo1},{8:[2,34]},{32:460,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,461],41:$Vo1},{8:[2,35]},{32:462,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,463],41:$Vo1},{16:464,45:$V6},o($Vi,[2,76]),{16:465,45:$V6},{16:466,45:$V6},{16:467,45:$V6},{16:468,45:$V6},{38:[1,469],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{41:[1,470]},{38:[1,471],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{41:[1,472]},{38:[1,473],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{41:[1,474]},{38:[1,475],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{41:[1,476]},{38:[1,477],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{41:[1,478]},o($VU,[2,67]),o($Vi,[2,81]),o($Vi,[2,82]),o($Vi,[2,84]),o($Vi,[2,85]),{37:[1,479]},{37:[1,480]},{37:[1,481]},{37:[1,482]},{37:[1,483]},{37:[1,484]},{37:[1,485]},{37:[1,486]},{37:[1,487]},{37:[1,488]},{32:489,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:320,40:490,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:491,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:320,40:492,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:493,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:320,40:494,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:495,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:320,40:496,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:497,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{32:320,40:498,42:$Vy,44:$Vz,51:$VA,69:91,77:92,78:$VB,88:$VC,89:$VD,90:$VE,91:$VF,92:$VG,93:$VH,94:$VI,95:$VJ,96:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{38:[1,499],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{38:[1,500],41:$Vo1},{38:[1,501],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{38:[1,502],41:$Vo1},{38:[1,503],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{38:[1,504],41:$Vo1},{38:[1,505],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{38:[1,506],41:$Vo1},{38:[1,507],43:$VV,44:$VW,70:$VX,72:$VY,73:$VZ,74:$V_,75:$V$,76:$V01,82:$V11,83:$V21,84:$V31,85:$V41,86:$V51,87:$V61},{38:[1,508],41:$Vo1},{8:[2,36]},{38:[1,509]},{8:[2,37]},{38:[1,510]},{8:[2,38]},{38:[1,511]},{8:[2,39]},{38:[1,512]},{8:[2,40]},{38:[1,513]},{8:[2,46]},{8:[2,47]},{8:[2,48]},{8:[2,49]},{8:[2,50]}],
defaultActions: {44:[2,1],111:[2,61],112:[2,62],119:[2,106],120:[2,107],121:[2,108],122:[2,109],123:[2,110],307:[2,79],359:[2,41],364:[2,42],368:[2,43],372:[2,44],376:[2,45],433:[2,31],436:[2,32],439:[2,33],442:[2,34],445:[2,35],499:[2,36],501:[2,37],503:[2,38],505:[2,39],507:[2,40],509:[2,46],510:[2,47],511:[2,48],512:[2,49],513:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function AST_Node(tag,value,fila,columna){
        this.tag=tag;
        this.value=value;
        this.fila=fila;
        this.columna=columna;
        //Vamos a definir que tenga hijos
        this.childs=[]
        this.addChilds=addChilds;
        this.getSon=getSon;
        function addChilds(){
            for(var i =0; i< arguments.length;i++){
                this.childs.push(arguments[i]);
                if(arguments[i]!==null){
                    arguments[i].padre=this;
                }
            }
        }
        function getSon(pos){
            if(pos >this.hijos.length - 1)return null;
            return this.hijos[pos];
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran los espacios en blanco
break;
case 1:// comentarios de simple linea
break;
case 2://comentarios multilineas
break;
case 3:return 91
break;
case 4:return 92
break;
case 5:return 50
break;
case 6:return 66 
break;
case 7:return 67 
break;
case 8:return 49  
break;
case 9:return 59 
break;
case 10:return 60
break;
case 11:return 95
break;
case 12:return 96
break;
case 13:return 78
break;
case 14:return 57
break;
case 15:return 55
break;
case 16:return 58
break;
case 17:return 61  
break;
case 18:return 62
break;
case 19:return 97
break;
case 20:return 98
break;
case 21:return 79
break;
case 22:return 80
break;
case 23:return 81
break;
case 24:return 39
break;
case 25:return 99
break;
case 26:return 100
break;
case 27:return 63
break;
case 28:return 29
break;
case 29:return 33
break;
case 30:return 34
break;
case 31:return 36
break;
case 32:return 35
break;
case 33:return 76
break;
case 34:return 74
break;
case 35:return 70
break;
case 36:return 8
break;
case 37:return 41
break;
case 38:return 31
break;
case 39:return 37
break;
case 40:return 38
break;
case 41:return 51
break;
case 42:return 52
break;
case 43:return 45
break;
case 44:return 46
break;
case 45:return 44
break;
case 46:return 72
break;
case 47:return 88
break;
case 48:return 84
break;
case 49:return 82
break;
case 50:return 83
break;
case 51:return 85
break;
case 52:return 43
break;
case 53:return 75
break;
case 54:return 73
break;
case 55:return 86
break;
case 56:return 87
break;
case 57:return 71
break;
case 58:return 56
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93; 
break;
case 60: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 94; 
break;
case 61:return 90;
break;
case 62:return 42;
break;
case 63:return 89;
break;
case 64:return 5;
break;
case 65: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                          L_Error.getInstance().insertar(new N_Error("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                          return null; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:toString\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:run\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:length\b)/i,/^(?:tochararray\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:-)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\+)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\?)/i,/^(?::)/i,/^(?:[\"](\\n|\\r|\\t|\\'|\\"|\\\\|[^\"])*[\"])/i,/^(?:[\'](\\n|\\r|\\t|\\'|\\"|\\\\|[^\'])[\'])/i,/^(?:([0-9])+(["."])([0-9])+)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}